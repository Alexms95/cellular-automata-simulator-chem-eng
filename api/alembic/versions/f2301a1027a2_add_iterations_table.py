"""Add Iterations table

Revision ID: f2301a1027a2
Revises: e1ed25c83c80
Create Date: 2025-06-12 17:30:16.060698

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.orm import Session
from sqlalchemy.sql import text
from utils import compress_matrix, decompress_matrix

# revision identifiers, used by Alembic.
revision: str = "f2301a1027a2"
down_revision: Union[str, None] = "e1ed25c83c80"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "TB_ITERATIONS",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("simulation_id", sa.UUID(), nullable=False),
        sa.Column("chunk_number", sa.Integer(), nullable=False),
        sa.Column("data", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["simulation_id"],
            ["TB_SIMULATIONS.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # Migrate data from TB_SIMULATIONS.iterations to TB_ITERATIONS
    bind = op.get_bind()
    session = Session(bind=bind)

    simulations = session.execute(
        text('SELECT id, iterations FROM "TB_SIMULATIONS" WHERE iterations IS NOT NULL')
    ).fetchall()

    for simulation in simulations:
        simulation_id = simulation.id
        compressed_iterations = simulation.iterations

        # Decompress iterations
        decompressed_matrix = decompress_matrix(compressed_iterations)

        # Divide into chunks (1000 iterations per chunk)
        chunks = []
        for chunk_number, start in enumerate(range(0, len(decompressed_matrix), 1000)):
            chunk_data = {
                "chunk_number": chunk_number + 1,
                "data": compress_matrix(decompressed_matrix[start : start + 1000]),
            }
            chunks.append(chunk_data)

        # Insert chunks into TB_ITERATIONS
        for chunk in chunks:
            session.execute(
                text(
                    'INSERT INTO "TB_ITERATIONS" (simulation_id, chunk_number, data) VALUES (:simulation_id, :chunk_number, :data)'
                ),
                {
                    "simulation_id": simulation_id,
                    "chunk_number": chunk["chunk_number"],
                    "data": chunk["data"],
                },
            )

        # Clear old iterations column
        session.execute(
            text(
                "UPDATE 'TB_SIMULATIONS' SET iterations = NULL WHERE id = :simulation_id"
            ),
            {"simulation_id": simulation_id},
        )

    session.commit()

    op.drop_column("TB_SIMULATIONS", "iterations")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "TB_SIMULATIONS",
        sa.Column("iterations", sa.TEXT(), autoincrement=False, nullable=True),
    )

    op.drop_table("TB_ITERATIONS")
    # ### end Alembic commands ###
